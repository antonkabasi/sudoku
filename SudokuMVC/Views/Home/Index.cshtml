@model YourProjectNamespace.Models.SudokuGame
@{
    ViewData["Title"] = "Sudoku Game";
}

<!-- Custom CSS for highlighting in light green -->
<style>
  /* Apply light green highlight to both td and its input */
  .highlight, .highlight input {
    background-color: #c8e6c9 !important; /* Light green shade */
  }
</style>

<div class="container my-5">
  <h1 class="text-center">@ViewData["Title"]</h1>
  
  <!-- Difficulty Buttons -->
  <div class="d-flex justify-content-center mb-4">
      <a class="btn btn-primary mx-2" href="@Url.Action("Index", "Home", new { difficulty = "easy" })">Easy</a>
      <a class="btn btn-primary mx-2" href="@Url.Action("Index", "Home", new { difficulty = "medium" })">Medium</a>
      <a class="btn btn-primary mx-2" href="@Url.Action("Index", "Home", new { difficulty = "hard" })">Hard</a>
  </div>

  <!-- Display current difficulty and stopwatch -->
  <div class="text-center mb-3">
      <strong>Difficulty:</strong> @Model.Difficulty
  </div>
  <div class="text-center mb-4">
      <strong>Time:</strong> <span id="stopwatch">00:00</span>
  </div>
  
  <!-- Sudoku Board -->
  <table class="mx-auto" style="border-collapse: collapse;">
    @for (int i = 0; i < 9; i++)
    {
        <tr>
        @for (int j = 0; j < 9; j++)
        {
            // Determine border thickness for 3x3 blocks
            var borderTop = (i % 3 == 0) ? "3px solid black" : "1px solid black";
            var borderLeft = (j % 3 == 0) ? "3px solid black" : "1px solid black";
            var borderRight = (j == 8) ? "3px solid black" : "1px solid black";
            var borderBottom = (i == 8) ? "3px solid black" : "1px solid black";
        <td data-row="@i" data-col="@j" 
            style="width:50px; height:50px;
                   border-top:@borderTop;
                   border-left:@borderLeft;
                   border-right:@borderRight;
                   border-bottom:@borderBottom;
                   padding:0;">
            <input type="text" class="form-control text-center p-0 sudoku-cell" maxlength="1" 
                   value="@(Model.Board[i, j] != 0 ? Model.Board[i, j].ToString() : "")" 
                   style="height: 100%; border: none;" />
        </td>
        }
        </tr>
    }
  </table>
</div>

<!-- JavaScript for handling cell click highlighting -->
<script>
  // Remove any existing highlight classes from all cells.
  function clearHighlights() {
    const cells = document.querySelectorAll("table td");
    cells.forEach(cell => cell.classList.remove("highlight"));
  }

  // Highlight all cells in the same row, column, and 3x3 block.
  function highlightCells(selectedRow, selectedCol) {
    const cells = document.querySelectorAll("table td");
    cells.forEach(cell => {
      const row = parseInt(cell.getAttribute("data-row"));
      const col = parseInt(cell.getAttribute("data-col"));
      // Highlight if same row, same column, or in the same 3x3 box.
      if (
        row === selectedRow ||
        col === selectedCol ||
        (Math.floor(row / 3) === Math.floor(selectedRow / 3) &&
         Math.floor(col / 3) === Math.floor(selectedCol / 3))
      ) {
        cell.classList.add("highlight");
      }
    });
  }

  // Attach click event to each sudoku cell input.
  document.querySelectorAll("table td input.sudoku-cell").forEach(input => {
    input.addEventListener("click", function () {
      const td = this.closest("td");
      const selectedRow = parseInt(td.getAttribute("data-row"));
      const selectedCol = parseInt(td.getAttribute("data-col"));
      clearHighlights();
      highlightCells(selectedRow, selectedCol);
    });
  });

  // Stopwatch polling code (unchanged)
  async function updateStopwatch() {
    try {
      const response = await fetch('@Url.Action("StopwatchTime", "Home")');
      const data = await response.json();
      let secondsElapsed = data.elapsed;
      const minutes = Math.floor(secondsElapsed / 60);
      const seconds = secondsElapsed % 60;
      document.getElementById('stopwatch').textContent =
        (minutes < 10 ? "0" + minutes : minutes) + ":" +
        (seconds < 10 ? "0" + seconds : seconds);
    } catch (error) {
      console.error('Error fetching stopwatch time:', error);
    }
  }
  setInterval(updateStopwatch, 1000);
  updateStopwatch();
</script>
