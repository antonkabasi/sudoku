@model YourProjectNamespace.Models.Sudoku
@{
    ViewData["Title"] = "Sudoku Game";
    // Determine maximum number of rows among the three lists for the leaderboard.
    // (This is used only in the leaderboard component, not here.)
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <style>
        /* Fixed-height message container */
        #messageContainer {
            height: 50px;
            margin-bottom: 10px;
            overflow: hidden;
        }
        #messageContainer .alert {
            margin: 0;
            line-height: 50px;
            font-size: 1.1em;
        }
        #autoMessage {
            height: 30px;
            margin-bottom: 10px;
            overflow: hidden;
            font-weight: bold;
        }
        .highlight, .highlight input {
            background-color: #c8e6c9 !important;
        }
        table {
            border-collapse: collapse;
        }
    </style>
</head>
<body>
<div class="container my-5">
    <h1 class="text-center">@ViewData["Title"]</h1>
    
    <!-- Difficulty Buttons -->
    <div class="d-flex justify-content-center mb-4">
        <a class="btn btn-primary mx-2" href="@Url.Action("Index", "Home", new { difficulty = "easy" })">Easy</a>
        <a class="btn btn-primary mx-2" href="@Url.Action("Index", "Home", new { difficulty = "medium" })">Normal</a>
        <a class="btn btn-primary mx-2" href="@Url.Action("Index", "Home", new { difficulty = "hard" })">Hard</a>
    </div>
    
    <!-- Fixed Message Container -->
    <div id="messageContainer">
        @if(ViewBag.Message != null)
        {
            <div class="alert alert-info text-center">
                @ViewBag.Message
            </div>
        }
    </div>
    
    <!-- Auto-check Message Container -->
    <div id="autoMessage" class="text-center"></div>
    
    <div class="row">
        <!-- Puzzle Column (8/12 width) -->
        <div class="col-md-8">
            <!-- Stopwatch Display -->
            <div class="text-center mb-4">
                <strong>Time:</strong> <span id="stopwatch">00:00</span>
            </div>
            <!-- Sudoku Board Form -->
            <form method="post" action="@Url.Action("Check", "Home")" id="sudokuForm">
                <table class="mx-auto">
                    @for (int i = 0; i < 9; i++)
                    {
                        <tr>
                            @for (int j = 0; j < 9; j++)
                            {
                                var borderTop = (i % 3 == 0) ? "3px solid black" : "1px solid black";
                                var borderLeft = (j % 3 == 0) ? "3px solid black" : "1px solid black";
                                var borderRight = (j == 8) ? "3px solid black" : "1px solid black";
                                var borderBottom = (i == 8) ? "3px solid black" : "1px solid black";
                            <td data-row="@i" data-col="@j" style="width:50px; height:50px; border-top:@borderTop; border-left:@borderLeft; border-right:@borderRight; border-bottom:@borderBottom; padding:0;">
                                @{
                                    byte givenValue = Model.Given[i][j];
                                    byte userValue = Model.UserGrid[i][j];
                                    bool isGiven = givenValue != 0;
                                    string cellValue = isGiven ? givenValue.ToString() : (userValue != 0 ? userValue.ToString() : "");
                                }
                                <input name="@($"cell_{i}_{j}")" type="text" class="form-control text-center p-0 sudoku-cell" maxlength="1" 
                                       value="@cellValue" style="height: 100%; border: none;" @(isGiven ? "readonly" : "") />
                            </td>
                            }
                        </tr>
                    }
                </table>
                <div class="text-center mt-3">
                    <button type="submit" class="btn btn-success">Check</button>
                    <button type="submit" formaction="@Url.Action("Solve", "Home")" class="btn btn-danger ml-2">Solve</button>
                </div>
            </form>
        </div>
        <!-- Leaderboard Column (4/12 width) -->
        <div class="col-md-4">
            @* If the puzzle qualifies as a new top 10 score, show the submission form above the leaderboard *@
            @if(ViewBag.QualifiedForLeaderboard != null && (bool)ViewBag.QualifiedForLeaderboard == true)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        New Top 10! Submit Your Score
                    </div>
                    <div class="card-body">
                        <form asp-action="SubmitScore" method="post">
                            <div class="form-group">
                                <label>Player Name</label>
                                <input type="text" name="PlayerName" class="form-control" placeholder="Enter your name" required />
                            </div>
                            <input type="hidden" name="Difficulty" value="@ViewBag.Difficulty" />
                            <input type="hidden" name="StopwatchValue" value="@ViewBag.ElapsedTime" />
                            <button type="submit" class="btn btn-primary">Submit Score</button>
                        </form>
                    </div>
                </div>
            }
            @await Component.InvokeAsync("Leaderboard")
        </div>
    </div>
</div>

<!-- JavaScript for highlighting, auto-check, and stopwatch polling -->
<script>
    // Highlighting logic for clicked cell.
    function clearHighlights() {
        const cells = document.querySelectorAll("table td");
        cells.forEach(cell => cell.classList.remove("highlight"));
    }
    function highlightCells(selectedRow, selectedCol) {
        const cells = document.querySelectorAll("table td");
        cells.forEach(cell => {
            const row = parseInt(cell.getAttribute("data-row"));
            const col = parseInt(cell.getAttribute("data-col"));
            if (
                row === selectedRow ||
                col === selectedCol ||
                (Math.floor(row / 3) === Math.floor(selectedRow / 3) &&
                 Math.floor(col / 3) === Math.floor(selectedCol / 3))
            ) {
                cell.classList.add("highlight");
            }
        });
    }
    document.querySelectorAll("table td input.sudoku-cell").forEach(input => {
        input.addEventListener("click", function () {
            const td = this.closest("td");
            const selectedRow = parseInt(td.getAttribute("data-row"));
            const selectedCol = parseInt(td.getAttribute("data-col"));
            clearHighlights();
            highlightCells(selectedRow, selectedCol);
        });
        // On keyup, trigger auto-check.
        input.addEventListener("keyup", function () {
            checkIfComplete();
        });
    });

    // Auto-check: if every cell is filled, send their values via AJAX to the Validate endpoint.
    function checkIfComplete() {
        const inputs = document.querySelectorAll("table td input.sudoku-cell");
        let complete = true;
        let cellData = {};
        inputs.forEach(input => {
            if (input.value.trim() === "") {
                complete = false;
            }
            cellData[input.name] = input.value.trim();
        });
        if (complete) {
            fetch('@Url.Action("Validate", "Home")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cellData)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("autoMessage").innerText = data.message;
            })
            .catch(error => console.error('Error validating puzzle:', error));
        } else {
            document.getElementById("autoMessage").innerText = "";
        }
    }

    // Stopwatch polling from the server.
    async function updateStopwatch() {
        try {
            const response = await fetch('@Url.Action("StopwatchTime", "Home")');
            const data = await response.json();
            let secondsElapsed = data.elapsed;
            const minutes = Math.floor(secondsElapsed / 60);
            const seconds = secondsElapsed % 60;
            document.getElementById('stopwatch').textContent =
                (minutes < 10 ? "0" + minutes : minutes) + ":" +
                (seconds < 10 ? "0" + seconds : seconds);
        } catch (error) {
            console.error('Error fetching stopwatch time:', error);
        }
    }
    setInterval(updateStopwatch, 1000);
    updateStopwatch();
</script>
</body>
</html>
